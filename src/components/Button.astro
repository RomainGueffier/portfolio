---
type Variant = 'default' | 'rounded'
type VariantStyles = {
  [k in Variant]: string
}

type ColorScheme = 'light' | 'dark' | 'primary'
type ColorSchemeStyles = {
  [k in ColorScheme]: string
}

export interface Props {
  ariaLabel?: string
  variant?: Variant
  colorScheme?: ColorScheme
  override?: string
  type?: 'submit' | 'button'
}

const {
  ariaLabel,
  variant = 'default',
  colorScheme = 'light',
  override,
  type = 'button',
} = Astro.props as Props

const btnVariants: VariantStyles = {
  default:
    'w-fit h-fit p-1 rounded-full hover:scale-110 transition-all ease-in-out duration-200',
  rounded:
    'py-2 px-4 rounded-full shadow hover:scale-105 transition-all ease-in-out duration-200',
}

const btnColorScheme: ColorSchemeStyles = {
  light: 'text-slate-900 bg-white hover:bg-slate-50',
  dark: 'text-slate-100 bg-slate-800 hover:bg-slate-900',
  primary: 'text-blue-100 bg-blue-600 hover:bg-blue-800',
}

const classDeclarations = `${btnVariants?.[variant]} ${btnColorScheme?.[colorScheme]} ${override}`
---

<button class={classDeclarations} aria-label={ariaLabel} type={type}>
  <slot />
</button>
